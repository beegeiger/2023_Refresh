SELECT * FROM test_table;

CREATE TABLE test_table (
   id INTEGER, 
   name TEXT, 
   age INTEGER
); 

INSERT INTO test_table (id, name, age) 
VALUES (1, 'Clark Kent', 30);

SELECT name FROM test_table;
SELECT * FROM celebs; 

ALTER TABLE test_table; 
ADD COLUMN skill TEXT;

UPDATE test_table 
SET skill = 'money' 
WHERE id = 1; 

DELETE FROM test_table 
WHERE skill IS NULL;


CREATE TABLE test_table (
   id INTEGER PRIMARY KEY, 
   name TEXT UNIQUE,
   date_of_birth TEXT NOT NULL,
   date_of_death TEXT DEFAULT 'Not Applicable'
);



REFRESH 2

SELECT name, skill 
FROM test_table;

SELECT name AS 'Title'
FROM test_table;

SELECT DISTINCT skills 
FROM test_table;

SELECT *
FROM test_table
WHERE hero_rating > 8;

SELECT * 
FROM test_table
WHERE name LIKE 'Ba_man';

SELECT * 
FROM test_table 
WHERE name LIKE '%atma%';

SELECT name
FROM test_table
WHERE hero_rating IS NOT NULL;

SELECT *
FROM test_table
WHERE name BETWEEN 'A' AND 'J';

SELECT * 
FROM test_table
WHERE hero_rating BETWEEN 2 AND 7
   AND skill = 'flight';

SELECT * 
FROM test_table
WHERE hero_rating BETWEEN 2 AND 7
   OR skill = 'flight';

SELECT *
FROM test_table
ORDER BY name;

SELECT *
FROM test_table
WHERE heo_rating > 8
ORDER BY year_started DESC;

SELECT *
FROM test_table
LIMIT 10;

SELECT name,
 CASE
  WHEN herp_rating > 8 THEN 'Fantastic'
  WHEN hero_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END AS 'Review'
FROM test_table;


REFRESH 3

COUNT(): count the number of rows
SUM(): the sum of the values in a column
MAX()/MIN(): the largest/smallest value
AVG(): the average of the values in a column
ROUND(): round the values in the column


SELECT COUNT(*) 
FROM test_table;

SELECT AVG(downloads)
FROM test_table;

SELECT ROUND(price, 0)
FROM test_table;

SELECT name, ROUND(price, 0)
FROM test_table;

SELECT year,
   AVG(here_rating)
FROM test_table
GROUP BY year
ORDER BY year;

SELECT price, COUNT(*) 
FROM test_table
WHERE downloads > 20000
GROUP BY skill;


SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY ROUND(imdb_rating)
ORDER BY ROUND(imdb_rating);
=============================
SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY 1
ORDER BY 1;

1 is the first column selected
2 is the second column selected
3 is the third column selected

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY 1, 2;


SELECT year,
   genre,
   COUNT(name)
FROM movies
GROUP BY 1, 2
HAVING COUNT(name) > 10;

When we want to limit the results of a query based on values of the individual rows, use WHERE.
When we want to limit the results of a query based on an aggregate property, use HAVING.


REFRESH 4

Inner Join:

SELECT orders.order_id,
   customers.customer_name
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;

Left Join:

SELECT *
FROM table1
LEFT JOIN table2
  ON table1.c2 = table2.c2;

SELECT *
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id;

SELECT *
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id
WHERE online.id IS NULL;


Cross Join:

SELECT shirts.shirt_color,
   pants.pants_color
FROM shirts
CROSS JOIN pants;






SELECT *
FROM table1
UNION
SELECT *
FROM table2;





SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id;
=======??????
WITH previous_results AS (
   SELECT ...
   ...
   ...
   ...
)
SELECT *
FROM previous_results
JOIN customers
  ON _____ = _____;




JOIN will combine rows from different tables if the join condition is true.

LEFT JOIN will return every row in the left table, and if the join condition is not met, NULL values are used to fill in the columns from the right table.

Primary key is a column that serves a unique identifier for the rows in the table.

Foreign key is a column that contains the primary key to another table.

CROSS JOIN lets us combine all rows of one table with all rows of another table.

UNION stacks one dataset on top of another.

WITH allows us to define one or more temporary tables that can be used in the final query.



PRACTICE

SQL Sort Ages

SELECT * FROM maintable_5K73J
WHERE LastName = 'Smith' OR FirstName = 'Robert'
ORDER BY Age ASC;


SQL Basic Sum

SELECT Lastname, SUM(Age) AS 'SumAge' 
FROM maintable_PZ72Z
WHERE Lastname = 'Smith';


SQL Basic Find

SELECT FirstName, LastName, Age
FROM maintable_S3LO0
WHERE Age > 25
ORDER BY ID;

Medium
SQL User Logins

SELECT MONTHNAME(DateJoined) as Month, 
  (SELECT COUNT(*) AS month2
  FROM maintable_IT4DX AS maint2
  WHERE MONTH(main.DateJoined) = MONTH(maint2.DateJoined) 
  GROUP BY MONTH(maint2.DateJoined))
  -
  (SELECT COUNT(*) AS month1
  FROM maintable_IT4DX AS maint1
  WHERE MONTH(main.DateJoined) = MONTH(maint1.DateJoined) + 1
  GROUP BY MONTH(maint1.DateJoined))
    as MonthToMonthChange
FROM maintable_IT4DX AS main
WHERE MONTH(main.DateJoined) != 1
GROUP BY MONTH(main.DateJoined);

Medium
SQL Vendor Joins
SELECT cb_vendorinformation.GroupID, 
  cb_vendorinformation.CompanyName,
  COUNT(*) AS Count
FROM maintable_O6LO3
INNER JOIN cb_vendorinformation
  ON maintable_O6LO3.GroupID = cb_vendorinformation.GroupID
GROUP BY GroupID
ORDER BY Count, GroupID;

Medium
SQL Contains Letter
SELECT COUNT(*) 
FROM maintable_WVT84
WHERE FirstName LIKE "%e%"
  AND LENGTH(LastName) > 5;




Hard
SQL Employee Salaries
SELECT t1.ID, t1.Name, t2.DivisionName, t3.Name AS 'Manager Name', t1.Salary
  FROM maintable_2DM6F t1
  JOIN cb_companydivisions t2
    ON t1.DivisionID = t2.ID
  JOIN maintable_2DM6F t3
    ON t1.ManagerID = t3.ID
  ORDER BY t1. Salary
  LIMIT 2,1;


HARD
SQL Company Boss
SELECT t1.FirstName, t1.LastName, t1.ReportsTo, t1.Position, t1.Age, IFNULL(t2.Position,"None") AS "Boss Title"
  FROM maintable_JHYVA t1
  LEFT JOIN maintable_JHYVA t2
    ON t1.ReportsTo = CONCAT(t2.FirstName, " ", t2.LastName)
  WHERE t1.ReportsTo = "Jenny Richards" OR t1.ReportsTo IS NULL
  ORDER BY t1.Age;

  ReDone Vendor Joins
SELECT t1.GroupID, t2.CompanyName, COUNT(*) AS Count
FROM maintable_LAGGR t1
JOIN cb_vendorinformation t2
  ON t1.GroupID = t2.GroupID
GROUP BY t1.GroupID
ORDER BY Count, t1.GroupID;